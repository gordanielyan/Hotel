/******************************************************************************/
/***          Generated by IBExpert 2019.8.30.1 31.05.2022 2:32:35          ***/
/******************************************************************************/

/******************************************************************************/
/***                                Domains                                 ***/
/******************************************************************************/

CREATE DOMAIN FLOAT AS 
FLOAT;

CREATE DOMAIN MON$SEC_DATABASE AS 
CHAR(7) CHARACTER SET ASCII
NOT NULL
COLLATE ASCII;

CREATE DOMAIN SEC$KEY AS 
VARCHAR(31) CHARACTER SET UNICODE_FSS
COLLATE UNICODE_FSS;

CREATE DOMAIN SEC$NAME_PART AS 
VARCHAR(32) CHARACTER SET UNICODE_FSS
COLLATE UNICODE_FSS;

CREATE DOMAIN SEC$USER_NAME AS 
VARCHAR(31) CHARACTER SET UNICODE_FSS
COLLATE UNICODE_FSS;

CREATE DOMAIN SEC$VALUE AS 
VARCHAR(255) CHARACTER SET UNICODE_FSS
COLLATE UNICODE_FSS;



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR GEN_BOOK_ID;
CREATE GENERATOR GEN_CLIENT_ID;
CREATE GENERATOR GEN_COMPLAIN_ID;
CREATE GENERATOR GEN_CORPUS_ID;
CREATE GENERATOR GEN_DEBT_SERVICE_ID;
CREATE GENERATOR GEN_NEW_TABLE_ID;
CREATE GENERATOR GEN_ORGANIZATION_ID;
CREATE GENERATOR GEN_ROOMS_ID;
CREATE GENERATOR GEN_SERVICE_ID;


/******************************************************************************/
/***                               Exceptions                               ***/
/******************************************************************************/

/******************************************************************************/
/***                               Procedures                               ***/
/******************************************************************************/

SET TERM ^ ;

CREATE PROCEDURE ADD_BOOK(
    IN_ID INTEGER,
    IN_ID_CLIENT INTEGER,
    IN_ROOMS INTEGER,
    IN_DATE_IN DATE,
    IN_DATE_OUT DATE,
    CORPUS_CLASS INTEGER,
    IN_PEOPLE INTEGER,
    IN_DATE_BOOKED DATE)
RETURNS (
    SUCCESS INTEGER)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE ADD_CLIENT(
    IN_ID INTEGER,
    IN_NAME VARCHAR(59),
    ID_ORGANIZATION INTEGER,
    PASSPORT INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ADD_COMPLAIN(
    IN_ID INTEGER,
    IN_COMPLAIN VARCHAR(100),
    IN_ID_CLIENT INTEGER,
    IN_DATE DATE)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ADD_ORGANIZATION(
    IN_ID INTEGER,
    IN_NAME VARCHAR(50),
    IN_DISCOUNT INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ADD_SERVICE(
    IN_ID INTEGER,
    IN_NAME VARCHAR(59),
    IN_PRICE FLOAT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ADD_SERV_CLIENT(
    IN_ID_CLIENT INTEGER,
    IN_ID_SERVICE INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ADD_SURVEY(
    IN_IDCLIENT INTEGER,
    IN_SERV INTEGER,
    IN_PRICE INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE DELETE_BOOK(
    IN_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE DELETE_CLIENT(
    IN_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE DELETE_CLIENT_SERVICE(
    IN_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE DELETE_COMPLAIN(
    IN_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE DELETE_ORGANIZATION(
    IN_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE DELETE_SERVICE(
    IN_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE DEL_SURVEY(
    IN_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE GENERATE_ROOMS
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE TEST
RETURNS (
    STARTT VARCHAR(10),
    FINISH VARCHAR(10))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE UPDATE_ROOMS
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE UPD_SURVEY(
    IN_ID INTEGER,
    IN_PRICE INTEGER,
    IN_SERV INTEGER)
AS
BEGIN
  EXIT;
END^


SET TERM ; ^



/******************************************************************************/
/***                            Tables and Views                            ***/
/******************************************************************************/

CREATE TABLE CLIENT_ROOM (
    ID_CLIENT INTEGER,
    ID_ROOM INTEGER,
    ID_BOOK INTEGER);


CREATE TABLE COMPLAIN (
    ID INTEGER NOT NULL,
    DATE DATE,
    COMPLAIN VARCHAR(100) CHARACTER SET WIN1251,
    ID_CLIENT INTEGER);


CREATE TABLE CORPUS (
    ID INTEGER NOT NULL,
    CLASS INTEGER,
    ONE_MAN INTEGER,
    TWO_MAN INTEGER,
    THREE_MAN INTEGER,
    FLOORS INTEGER);


CREATE TABLE ORGANIZATION (
    ID_ORGANIZATION INTEGER NOT NULL,
    NAME VARCHAR(50) CHARACTER SET WIN1251,
    DISCOUNT INTEGER);


CREATE TABLE CLIENT (
    ID INTEGER NOT NULL,
    NAME VARCHAR(59) CHARACTER SET WIN1251,
    ID_ORGANIZATION INTEGER,
    PASSPORT INTEGER,
    DISCOUNT COMPUTED BY ((select discount from organization where organization.id_organization = client.id_organization)));


CREATE TABLE BOOK (
    ID INTEGER NOT NULL,
    ID_CLIENT INTEGER,
    ROOMS INTEGER,
    DATE_IN DATE,
    DATE_OUT DATE,
    CORPUS_CLASS INTEGER,
    PEOPLE INTEGER,
    DATE_BOOKED DATE,
    ID_ORGANIZATION COMPUTED BY ((select id_organization from client where id = id_client)),
    PLACED INTEGER);


CREATE TABLE ROOMS (
    ID INTEGER NOT NULL,
    ID_BOOK INTEGER,
    ID_CORPUS INTEGER,
    PERSONS INTEGER,
    FLOOR INTEGER,
    PRICE FLOAT,
    MANS INTEGER,
    ID_CLIENT COMPUTED BY ((select id_client from book where book.id = id_book)),
    CORPUS_CLASS COMPUTED BY ((select class from corpus where corpus.id = id_corpus)));


CREATE TABLE SERVICE (
    ID INTEGER NOT NULL,
    NAME VARCHAR(59) CHARACTER SET WIN1251,
    PRICE FLOAT);


CREATE TABLE DEBT_SERVICE (
    ID SMALLINT NOT NULL,
    ID_CLIENT INTEGER NOT NULL,
    ID_SERVICE INTEGER,
    SERVNAME COMPUTED BY ((select name from service where id = id_service)),
    PRICE COMPUTED BY ((select price from service where id_service = service.id)));


CREATE TABLE DEBT (
    ID_CLIENT INTEGER,
    SUMM COMPUTED BY ((select sum(price) from debt_service where debt.id_client = debt_service.id_client)));


CREATE TABLE SURVEY (
    ID_CLIENT INTEGER NOT NULL,
    SERVICE INTEGER,
    PRICE INTEGER);




/******************************************************************************/
/***                              Primary keys                              ***/
/******************************************************************************/


ALTER TABLE COMPLAIN ADD CONSTRAINT PK_COMPLAIN PRIMARY KEY (ID);
ALTER TABLE CORPUS ADD CONSTRAINT PK_CORPUS PRIMARY KEY (ID);
ALTER TABLE ORGANIZATION ADD CONSTRAINT PK_ORGANIZATION PRIMARY KEY (ID_ORGANIZATION);
ALTER TABLE CLIENT ADD CONSTRAINT PK_CLIENT PRIMARY KEY (ID);
ALTER TABLE BOOK ADD CONSTRAINT PK_BOOK PRIMARY KEY (ID);
ALTER TABLE ROOMS ADD CONSTRAINT PK_ROOMS PRIMARY KEY (ID);
ALTER TABLE SERVICE ADD CONSTRAINT PK_SERVICE PRIMARY KEY (ID);
ALTER TABLE DEBT_SERVICE ADD PRIMARY KEY (ID);

/******************************************************************************/
/***                           Unique constraints                           ***/
/******************************************************************************/



/******************************************************************************/
/***                              Foreign keys                              ***/
/******************************************************************************/


ALTER TABLE CLIENT_ROOM ADD CONSTRAINT FK_CLIENT_ROOM_1 FOREIGN KEY (ID_CLIENT) REFERENCES CLIENT (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE CLIENT_ROOM ADD CONSTRAINT FK_CLIENT_ROOM_2 FOREIGN KEY (ID_ROOM) REFERENCES ROOMS (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE CLIENT_ROOM ADD CONSTRAINT FK_CLIENT_ROOM_3 FOREIGN KEY (ID_BOOK) REFERENCES BOOK (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE COMPLAIN ADD CONSTRAINT FK_COMPLAIN_1 FOREIGN KEY (ID_CLIENT) REFERENCES CLIENT (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE CLIENT ADD CONSTRAINT FK_CLIENT_1 FOREIGN KEY (ID_ORGANIZATION) REFERENCES ORGANIZATION (ID_ORGANIZATION) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE BOOK ADD CONSTRAINT FK_BOOK_1 FOREIGN KEY (ID_CLIENT) REFERENCES CLIENT (ID);
ALTER TABLE ROOMS ADD CONSTRAINT FK_ROOMS_1 FOREIGN KEY (ID_CORPUS) REFERENCES CORPUS (ID);
ALTER TABLE DEBT_SERVICE ADD CONSTRAINT FK_DEBT_SERVICE_1 FOREIGN KEY (ID_CLIENT) REFERENCES CLIENT (ID);
ALTER TABLE DEBT_SERVICE ADD CONSTRAINT FK_DEBT_SERVICE_2 FOREIGN KEY (ID_SERVICE) REFERENCES SERVICE (ID);
ALTER TABLE DEBT ADD CONSTRAINT FK_DEBT_1 FOREIGN KEY (ID_CLIENT) REFERENCES CLIENT (ID);
ALTER TABLE SURVEY ADD CONSTRAINT FK_SURVEY_1 FOREIGN KEY (ID_CLIENT) REFERENCES CLIENT (ID) ON DELETE SET NULL ON UPDATE CASCADE;

/******************************************************************************/
/***                           Check constraints                            ***/
/******************************************************************************/



/******************************************************************************/
/***                                Indices                                 ***/
/******************************************************************************/



/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/

SET TERM ^ ;

CREATE TRIGGER BOOK_BI FOR BOOK
ACTIVE BEFORE INSERT POSITION 0
as
begin
    new.id = gen_id(gen_book_id,1);
end
^

CREATE TRIGGER CLIENT_BI FOR CLIENT
ACTIVE BEFORE INSERT POSITION 0
as
begin
    new.id = gen_id(gen_client_id,1);
end
^

CREATE TRIGGER COMPLAIN_BI FOR COMPLAIN
ACTIVE BEFORE INSERT POSITION 0
as
begin
    new.id = gen_id(gen_complain_id,1);
end
^

CREATE TRIGGER CORPUS_BI FOR CORPUS
ACTIVE BEFORE INSERT POSITION 0
as
begin
    new.id = gen_id(gen_corpus_id,1);
end
^

CREATE TRIGGER DEBT_SERVICE_BI FOR DEBT_SERVICE
ACTIVE BEFORE INSERT POSITION 0
as
begin
    new.id = gen_id(gen_debt_service_id,1);
end
^

CREATE TRIGGER ORGANIZATION_BI FOR ORGANIZATION
ACTIVE BEFORE INSERT POSITION 0
as
begin
    new.id_organization = gen_id(gen_organization_id,1);
end
^

CREATE TRIGGER ROOMS_BI FOR ROOMS
ACTIVE BEFORE INSERT POSITION 0
as
begin
    new.id = gen_id(gen_rooms_id,1);
end
^

CREATE TRIGGER SERVICE_BI FOR SERVICE
ACTIVE BEFORE INSERT POSITION 0
as
begin
    new.id = gen_id(gen_service_id,1);
end
^

SET TERM ; ^

/******************************************************************************/
/***                               Procedures                               ***/
/******************************************************************************/

SET TERM ^ ;

ALTER PROCEDURE ADD_BOOK(
    IN_ID INTEGER,
    IN_ID_CLIENT INTEGER,
    IN_ROOMS INTEGER,
    IN_DATE_IN DATE,
    IN_DATE_OUT DATE,
    CORPUS_CLASS INTEGER,
    IN_PEOPLE INTEGER,
    IN_DATE_BOOKED DATE)
RETURNS (
    SUCCESS INTEGER)
AS
declare variable id integer;
begin
    if (:in_id = 0) then
    begin
        if ((select count(*) from rooms where :in_rooms = rooms.mans and rooms.corpus_class = :corpus_class) = (select count(*) from book where book.corpus_class = :corpus_class and book.rooms = :in_rooms and book.date_in <= :in_date_out and book.date_out >= :in_date_in)) then
        begin
            :success = 0;
            exit;
        end
        insert into book(id_client, rooms, date_in, date_out, corpus_class, people, date_booked) values(:in_id_client, :in_rooms, :in_date_in, :in_date_out,:corpus_class, :in_people, :in_date_booked) returning id into :id;
    end
    else update book set id_client = :in_id_client, rooms = :in_rooms, date_in = :in_date_in, date_out = :in_date_out, people = :in_people, date_booked = :in_date_booked , corpus_class = :corpus_class where id = :in_id;
    :success = 1;
end^


ALTER PROCEDURE ADD_CLIENT(
    IN_ID INTEGER,
    IN_NAME VARCHAR(59),
    ID_ORGANIZATION INTEGER,
    PASSPORT INTEGER)
AS
begin
    if (:in_id = 0) then
            insert into client(name, id_organization, passport) values(:in_name, :id_organization, :passport);
    else
        update client set name = :in_name, passport = :passport where id = :in_id;
            
end^


ALTER PROCEDURE ADD_COMPLAIN(
    IN_ID INTEGER,
    IN_COMPLAIN VARCHAR(100),
    IN_ID_CLIENT INTEGER,
    IN_DATE DATE)
AS
begin
    if (:IN_ID = 0) then
    insert into complain values(:IN_ID,:in_date, :in_complain, :in_id_client);
    else
    update complain set "DATE" = :in_date, complain.complain = :in_complain where ID = :in_id;
end^


ALTER PROCEDURE ADD_ORGANIZATION(
    IN_ID INTEGER,
    IN_NAME VARCHAR(50),
    IN_DISCOUNT INTEGER)
AS
begin
    if (:in_id = 0) then
            insert into organization values(:in_id, :in_name, :in_discount);
    else
        update organization set name = :in_name, discount = :in_discount where id_organization = :in_id;
            
end^


ALTER PROCEDURE ADD_SERVICE(
    IN_ID INTEGER,
    IN_NAME VARCHAR(59),
    IN_PRICE FLOAT)
AS
begin
    if (:in_id = 0) then
     insert into service values (:in_id, :in_name, :in_price);
    else
     update service set name = :in_name, price = :in_price where id = :in_id;
end^


ALTER PROCEDURE ADD_SERV_CLIENT(
    IN_ID_CLIENT INTEGER,
    IN_ID_SERVICE INTEGER)
AS
declare variable reccount integer;
begin
    select count(*) from debt_service where id_client = :in_id_client into :reccount;
    if (:reccount = 0) then
        insert into debt(id_client) values(:in_id_client);
        insert into debt_service(id_client, id_service) values(:in_id_client, :in_id_service);
end^


ALTER PROCEDURE ADD_SURVEY(
    IN_IDCLIENT INTEGER,
    IN_SERV INTEGER,
    IN_PRICE INTEGER)
AS
begin
    insert into survey values(:in_idclient,:in_serv,:in_price);
end^


ALTER PROCEDURE DELETE_BOOK(
    IN_ID INTEGER)
AS
begin
    update rooms set id_book = null where id_book=:in_id;
    delete from book where id = :in_id;
end^


ALTER PROCEDURE DELETE_CLIENT(
    IN_ID INTEGER)
AS
begin
    delete from client where id = :in_id;
end^


ALTER PROCEDURE DELETE_CLIENT_SERVICE(
    IN_ID INTEGER)
AS
begin
    if ((select count(*) from debt_service where id_client = (select id_client from debt_service where id = :in_id)) = 1)
    then
    delete from debt where debt.id_client = (select id_client from debt_service where id = :in_id);
    delete from debt_service where id = :in_id;
end^


ALTER PROCEDURE DELETE_COMPLAIN(
    IN_ID INTEGER)
AS
begin
    delete from complain where id = :in_id;
end^


ALTER PROCEDURE DELETE_ORGANIZATION(
    IN_ID INTEGER)
AS
begin
    delete from organization where id_organization = :in_id;
end^


ALTER PROCEDURE DELETE_SERVICE(
    IN_ID INTEGER)
AS
begin
    delete from service where id = :in_id;
end^


ALTER PROCEDURE DEL_SURVEY(
    IN_ID INTEGER)
AS
begin
    delete from survey where id_client =:in_id;
end^


ALTER PROCEDURE GENERATE_ROOMS
AS
declare variable id integer;
declare variable i integer;
declare variable ones integer;
declare variable twos integer;
declare variable three integer;
begin
    for select id from corpus into :id
    do
        begin
            select one_man from corpus where id = :id into :ones;
            :i = 0;
            while (:i < :ones) do
            begin
               insert into rooms values (0, null,  :id, null, null, (:id + 2) * 300 * 1, 1);
               :i = :i + 1;
            end

            select two_man from corpus where id = :id into :twos;
            :i = 0;
            while (:i < :twos) do
            begin
               insert into rooms values (0, null,  :id, null, null, (:id + 3) * 300 * 2, 2);
               :i = :i + 1;
            end

            select three_man from corpus where id = :id into :three;
            :i = 0;
            while (:i < :three) do
            begin
               insert into rooms values (0, null,  :id, null, null, (:id + 4) * 300 * 3, 3);
               :i = :i + 1;
            end
        end
end^


ALTER PROCEDURE TEST
RETURNS (
    STARTT VARCHAR(10),
    FINISH VARCHAR(10))
AS
declare variable i integer;
begin
    i = 0;          
    startt = extract(millisecond from current_time);
    while (i < 1000) do
    begin
        insert into client(name, id_organization, passport) values('тест', 0, 1);
        i = i + 1;
    end
    finish = extract(second from current_time);
end^


ALTER PROCEDURE UPDATE_ROOMS
AS
declare variable dateout date;
declare variable datein date;
declare variable in_rooms integer;
declare variable id integer;
declare variable corpus_class integer;
declare variable placed integer;
declare variable client integer;
begin

    for select date_out, id, placed from book into :dateout, :id, :placed do
    begin
        if ((:dateout < current_date) and (:placed = 1)) then
        begin
            update rooms set rooms.id_book = null where id_book  = :id;
            update book set placed = 0 where id = :id;
        end

    end
    

    for select date_in, rooms, id, corpus_class, placed, id_client  from book into :datein, :in_rooms, :id, :corpus_class, :placed, :client do
    if ((:datein = current_date) and (:placed is null)) then
    begin
        update rooms set rooms.id_book = :id where (SELECT first 1 rooms.id FROM rooms WHERE rooms.corpus_class = :corpus_class and rooms.mans=:in_rooms and rooms.id_book is null) = rooms.id;
        update book set placed = 1 where id = :id;
        insert into client_room values(:client, (select rooms.id from rooms where rooms.id_book = :id), :id);
    end
end^


ALTER PROCEDURE UPD_SURVEY(
    IN_ID INTEGER,
    IN_PRICE INTEGER,
    IN_SERV INTEGER)
AS
begin
    update survey set price = :in_price, service =:in_serv where id_client =:in_id;
end^


SET TERM ; ^

